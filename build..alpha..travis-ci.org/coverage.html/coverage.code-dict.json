{"/home/travis/build/npmtest/node-npmtest-os-monitor/test.js":"/* istanbul instrument in package npmtest_os_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-os-monitor/lib.npmtest_os_monitor.js":"/* istanbul instrument in package npmtest_os_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_os_monitor = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_os_monitor = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-os-monitor/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-os-monitor && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_os_monitor */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_os_monitor\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_os_monitor.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_os_monitor.rollup.js'] =\n            local.assetsDict['/assets.npmtest_os_monitor.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_os_monitor.__dirname + '/lib.npmtest_os_monitor.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-os-monitor/node_modules/os-monitor/os-monitor.js":"// OS Monitoring for Node.js\r\n\r\n// Copyright (c) 2012-2015 lfortin\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining\r\n// a copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to\r\n// permit persons to whom the Software is furnished to do so, subject to\r\n// the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be\r\n// included in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\nvar util     = require('util'),\r\n    os       = require('os'),\r\n    stream   = require('readable-stream'),\r\n    _        = require('underscore'),\r\n    critical = os.cpus().length,\r\n    defaults = {\r\n      delay     : 3000,\r\n      critical1 : critical,\r\n      critical5 : critical,\r\n      critical15: critical,\r\n      freemem   : 0,\r\n      uptime    : 0,\r\n      silent    : false,\r\n      stream    : false,\r\n      immediate : false\r\n    };\r\n\r\n// constructor\r\nvar Monitor = function() {\r\n\r\n  stream.Readable.call(this, {highWaterMark: 102400});\r\n\r\n  this._monitorState = {\r\n    running: false,\r\n    ended: false,\r\n    streamBuffering: true,\r\n    interval: undefined,\r\n    config: _.clone(defaults)\r\n  };\r\n};\r\n\r\n\r\nutil.inherits(Monitor, stream.Readable);\r\n\r\nMonitor.prototype.version = '1.0.5';\r\n\r\n\r\n// readable stream implementation requirement\r\nMonitor.prototype._read = function() {\r\n  this._monitorState.streamBuffering = true;\r\n};\r\n\r\nMonitor.prototype.sendEvent = function(event, obj) {\r\n\r\n  var eventObject = _.extend({type: event, timestamp: Math.floor(_.now() / 1000)}, obj);\r\n  \r\n  // for EventEmitter\r\n  this.emit(event, eventObject);\r\n  // for readable Stream\r\n  if(this.config().stream && this._monitorState.streamBuffering) {\r\n    var prettyJSON = os.EOL + JSON.stringify(eventObject, null, 2);\r\n    if( !this.push(prettyJSON) ) {\r\n      this._monitorState.streamBuffering = false;\r\n    }\r\n  }\r\n};\r\n\r\nMonitor.prototype.start = function(options) {\r\n\r\n  var self = this;\r\n\r\n  if(this._isEnded()) {\r\n    throw new Error(\"monitor has been ended by .destroy() method\");\r\n  }\r\n\r\n  self.stop()\r\n      .config(options);\r\n\r\n  var cycle = function() {\r\n    var info = {\r\n      loadavg  : os.loadavg(),\r\n      uptime   : os.uptime(),\r\n      freemem  : os.freemem(),\r\n      totalmem : os.totalmem()\r\n    },\r\n    config = self.config(),\r\n    freemem  = (config.freemem < 1) ? config.freemem * info.totalmem : config.freemem;\r\n\r\n    if(!config.silent) {\r\n      self.sendEvent('monitor', info);\r\n    }\r\n    if(info.loadavg[0] > config.critical1) {\r\n      self.sendEvent('loadavg1', info);\r\n    }\r\n    if(info.loadavg[1] > config.critical5) {\r\n      self.sendEvent('loadavg5', info);\r\n    }\r\n    if(info.loadavg[2] > config.critical15) {\r\n      self.sendEvent('loadavg15', info);\r\n    }\r\n    if(info.freemem < freemem) {\r\n      self.sendEvent('freemem', info);\r\n    }\r\n    if(Number(config.uptime) && info.uptime > Number(config.uptime)) {\r\n      self.sendEvent('uptime', info);\r\n    }\r\n  };\r\n  \r\n  if(self.config().immediate) {\r\n    process.nextTick(cycle);\r\n  }\r\n  self._monitorState.interval = setInterval(cycle, self.config().delay);\r\n\r\n  if(!self.isRunning()) {\r\n    self._monitorState.running = true;\r\n    self.sendEvent('start');\r\n  }\r\n\r\n  return self;\r\n};\r\n\r\nMonitor.prototype.stop = function() {\r\n\r\n  clearInterval(this._monitorState.interval);\r\n\r\n  if(this.isRunning()) {\r\n    this._monitorState.running = false;\r\n    this.sendEvent('stop');\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nMonitor.prototype.reset = function() {\r\n  this.sendEvent('reset');\r\n  this[this.isRunning() ? 'start' : 'config'](_.clone(defaults));\r\n  return this;\r\n};\r\n\r\nMonitor.prototype.destroy = function() {\r\n\r\n  if(!this._isEnded()) {\r\n    this.sendEvent('destroy');\r\n    this.stop();\r\n    if(this instanceof stream.Readable) {\r\n      this.emit('close');\r\n      this.push(null);\r\n    }\r\n    this._monitorState.ended = true;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nMonitor.prototype.config = function(options) {\r\n\r\n  if(_.isObject(options)) {\r\n    _.extend(this._monitorState.config, options);\r\n    this.sendEvent('config', { options: _.clone(options) });\r\n  }\r\n\r\n  return this._monitorState.config;\r\n};\r\n\r\nMonitor.prototype.isRunning = function() {\r\n  return !!this._monitorState.running;\r\n};\r\n\r\nMonitor.prototype._isEnded = function() {\r\n  return !!this._monitorState.ended;\r\n};\r\n\r\nMonitor.prototype.throttle = function(event, handler, wait) {\r\n  var self     = this,\r\n      _handler = _.wrap(handler, function(fn) {\r\n                   if(self.isRunning()) {\r\n                     fn.apply(this, _.toArray(arguments).slice(1));\r\n                   }\r\n                 });\r\n  return self.on.call(self, event, _.throttle(_handler, wait || self.config().throttle));\r\n};\r\n\r\n\r\n/*\r\n * convenience methods\r\n */\r\n\r\nMonitor.prototype._sanitizeNumber = function(n) {\r\n  if(!_.isNumber(n)) {\r\n    throw new Error(\"Number expected\");\r\n  }\r\n  if(!n || n < 0) {\r\n    throw new Error(\"Number must be greater than 0\");\r\n  }\r\n  // Math.pow(2, 31);\r\n  if(n >= 2147483648) {\r\n    throw new Error(\"Number must be smaller than 2147483648\");\r\n  }\r\n  return n;\r\n};\r\n\r\nMonitor.prototype.seconds = function(n) {\r\n  return this._sanitizeNumber(n * 1000);\r\n};\r\n\r\nMonitor.prototype.minutes = function(n) {\r\n  return this._sanitizeNumber(n * this.seconds(60));\r\n};\r\n\r\nMonitor.prototype.hours = function(n) {\r\n  return this._sanitizeNumber(n * this.minutes(60));\r\n};\r\n\r\nMonitor.prototype.days = function(n) {\r\n  return this._sanitizeNumber(n * this.hours(24));\r\n};\r\n\r\n\r\n// expose OS module\r\nMonitor.prototype.os = os;\r\n\r\n// expose Underscore\r\nMonitor.prototype._ = _;\r\n\r\n// expose main class\r\nMonitor.prototype.Monitor = Monitor;\r\n\r\nmodule.exports = new Monitor();\r\n\r\n","/home/travis/build/npmtest/node-npmtest-os-monitor/node_modules/os-monitor/spec-runner.js":"\r\n\r\nvar assert = require('assert'),\r\n    os = require('os'),\r\n    mock = require('mock-os');\r\n\r\n// mock os module\r\nmock({\r\n  cpus: [{}, {}]\r\n});\r\n\r\nvar monitor = require('./os-monitor');\r\n\r\nfunction getEOL(n) {\r\n  var lines = [];\r\n  for(var i = 0; i < n; i++) {\r\n    lines.push(os.EOL);\r\n  }\r\n  return lines.join('');\r\n}\r\n\r\nprocess.stdout.write(\"running tests...\" + getEOL(2));\r\n\r\n\r\n\r\nassert.doesNotThrow(function() {\r\n\r\n  // API signature\r\n  assert.ok(monitor._read, \"internal ._read() method expected\");\r\n  assert.ok(monitor.version, \"version property expected\");\r\n  assert.ok(monitor.sendEvent, \".sendEvent() method expected\");\r\n  assert.ok(monitor.start, \".start() method expected\");\r\n  assert.ok(monitor.stop, \".stop() method expected\");\r\n  assert.ok(monitor.reset, \".reset() method expected\");\r\n  assert.ok(monitor.destroy, \".destroy() method expected\");\r\n  assert.ok(monitor.config, \".config() method expected\");\r\n  assert.ok(monitor.isRunning, \".isRunning() method expected\");\r\n  assert.ok(monitor.throttle, \".throttle() method expected\");\r\n  assert.ok(monitor.seconds, \".seconds() method expected\");\r\n  assert.ok(monitor.minutes, \".minutes() method expected\");\r\n  assert.ok(monitor.hours, \".hours() method expected\");\r\n  assert.ok(monitor.days, \".days() method expected\");\r\n  assert.ok(monitor.Monitor, \"Monitor class expected\");\r\n  assert.ok(monitor.os, \"os object reference expected\");\r\n  assert.ok(monitor._, \"_ object reference expected\");\r\n  //assert.ok(monitor.whetever, \"whatever expected\");\r\n\r\n\r\n  process.stdout.write(\"API signature OK\" + getEOL(1));\r\n\r\n\r\n  // config\r\n  monitor.config({test: 123});\r\n  assert.strictEqual(monitor.config().test, 123, \"config() : same config expected\");\r\n  monitor.start({test: 456});\r\n  assert.strictEqual(monitor.config().test, 456, \"start() : same config expected\");\r\n  monitor.stop();\r\n\r\n  process.stdout.write(\"config OK\" + getEOL(1));\r\n\r\n\r\n  // events\r\n  var trace = {};\r\n\r\n  monitor.on('monitor', function(event) {\r\n    trace.monitorEvent = event.type;\r\n  });\r\n  monitor.on('loadavg1', function(event) {\r\n    trace.loadavg1Event = event.type;\r\n  });\r\n  monitor.on('loadavg5', function(event) {\r\n    trace.loadavg5Event = event.type;\r\n  });\r\n  monitor.on('loadavg15', function(event) {\r\n    trace.loadavg15Event = event.type;\r\n  });\r\n  monitor.on('freemem', function(event) {\r\n    trace.freememEvent = event.type;\r\n  });\r\n  monitor.on('uptime', function(event) {\r\n    trace.uptimeEvent = event.type;\r\n  });\r\n  monitor.sendEvent('monitor', {type: 'monitor'});\r\n  monitor.sendEvent('loadavg1', {type: 'loadavg1'});\r\n  monitor.sendEvent('loadavg5', {type: 'loadavg5'});\r\n  monitor.sendEvent('loadavg15', {type: 'loadavg15'});\r\n  monitor.sendEvent('freemem', {type: 'freemem'});\r\n  monitor.sendEvent('uptime', {type: 'uptime'});\r\n  \r\n  assert.strictEqual(trace.monitorEvent, \"monitor\", \"'monitor' event expected\");\r\n  assert.strictEqual(trace.loadavg1Event, \"loadavg1\", \"'loadavg1' event expected\");\r\n  assert.strictEqual(trace.loadavg5Event, \"loadavg5\", \"'loadavg5' event expected\");\r\n  assert.strictEqual(trace.loadavg15Event, \"loadavg15\", \"'loadavg15' event expected\");\r\n  assert.strictEqual(trace.freememEvent, \"freemem\", \"'freemem' event expected\");\r\n  assert.strictEqual(trace.uptimeEvent, \"uptime\", \"'uptime' event expected\");\r\n  \r\n  process.stdout.write(\"events OK\" + getEOL(1));\r\n\r\n  monitor.removeAllListeners();\r\n\r\n\r\n  // readable stream interface\r\n  monitor.config({stream: true});\r\n  monitor.sendEvent('monitor', {type: 'monitor'});\r\n  assert.ok(monitor.read(), \"output expected from readable stream interface\");\r\n\r\n  process.stdout.write(\"readable stream interface OK\" + getEOL(1));\r\n\r\n\r\n  // isRunning() test\r\n  assert.strictEqual(monitor.isRunning(), false, \"isRunning() === false expected\");\r\n  monitor.start();\r\n  assert.strictEqual(monitor.isRunning(), true, \"isRunning() === true expected\");\r\n  monitor.stop();\r\n  assert.strictEqual(monitor.isRunning(), false, \"isRunning() === false expected\");\r\n\r\n  process.stdout.write(\"isRunning() test OK\" + getEOL(1));\r\n    \r\n    \r\n  // reset() test\r\n  monitor.config({\r\n                 delay: 1000,\r\n                 critital1: 1.5,\r\n                 critical5: 1.5,\r\n                 critical15: 1.5,\r\n                 freemem: 1,\r\n                 uptime: 1,\r\n                 silent: true,\r\n                 stream: true,\r\n                 immediate: true\r\n         });\r\n  monitor.reset();\r\n\r\n  assert.strictEqual(monitor.config().delay, 3000, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().critical1, os.cpus().length, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().critical5, os.cpus().length, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().critical15, os.cpus().length, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().freemem, 0, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().uptime, 0, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().silent, false, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().stream, false, \"config should be reset\");\r\n  assert.strictEqual(monitor.config().immediate, false, \"config should be reset\");\r\n\r\n  process.stdout.write(\"reset() test OK\" + getEOL(1));\r\n    \r\n    \r\n  // destroy() test\r\n  monitor.on('close', function() {\r\n    trace.closeEvent = 'close';\r\n  });\r\n\r\n  monitor.destroy();\r\n\r\n  assert.strictEqual(monitor.isRunning(), false, \"isRunning() === false expected\");\r\n  assert.strictEqual(trace.closeEvent, \"close\", \"'close' event expected\");\r\n  assert.throws(function() {\r\n                    monitor.start();\r\n                },\r\n                \"start() should throw\");\r\n  assert.throws(function() {\r\n                    monitor.push('some data');\r\n                },\r\n                \"push() should throw\");\r\n\r\n  process.stdout.write(\"destroy() test OK\" + getEOL(1));\r\n\r\n  monitor.removeAllListeners();\r\n\r\n}, function(error) {\r\n  process.stderr.write(error + getEOL(2));\r\n  process.exit();\r\n});\r\n\r\n\r\n// mock tests with 2 fake cpus\r\nmock({\r\n  cpus: [{}, {}],\r\n  loadavg: [3, 3, 3],\r\n  freemem: 1000,\r\n  totalmem: 5000,\r\n  uptime: 10000\r\n});\r\n\r\nvar monitor2 = new monitor.Monitor();\r\nvar monitor3 = new monitor.Monitor();\r\nvar trace2 = {};\r\nvar trace3 = {};\r\n\r\nmonitor2.on('freemem', function(event) {\r\n  trace2.freememAbsolute = event;\r\n})\r\n.on('uptime', function(event) {\r\n  trace2.uptime = event;\r\n})\r\n.on('loadavg1', function(event) {\r\n  trace2.loadavg1 = event;\r\n})\r\n.on('loadavg5', function(event) {\r\n  trace2.loadavg5 = event;\r\n})\r\n.on('loadavg15', function(event) {\r\n  trace2.loadavg15 = event;\r\n});\r\n\r\nmonitor3.on('freemem', function(event) {\r\n  trace3.freememAbsolute = event;\r\n})\r\n.on('uptime', function(event) {\r\n  trace3.uptime = event;\r\n})\r\n.on('loadavg1', function(event) {\r\n  trace3.loadavg1 = event;\r\n})\r\n.on('loadavg5', function(event) {\r\n  trace3.loadavg5 = event;\r\n})\r\n.on('loadavg15', function(event) {\r\n  trace3.loadavg15 = event;\r\n});\r\n\r\nmonitor2.start({\r\n  freemem: 20000,\r\n  uptime: 1000,\r\n  immediate: true\r\n});\r\n\r\nmonitor3.start({\r\n  freemem: 200,\r\n  uptime: 1000000,\r\n  critical1: 4,\r\n  critical5: 4,\r\n  critical15: 4,\r\n  immediate: true\r\n});\r\n\r\nprocess.nextTick(function() {\r\n  monitor2.removeAllListeners();\r\n  monitor3.removeAllListeners();\r\n  \r\n  monitor2.on('freemem', function(event) {\r\n    trace2.freememPct = event;\r\n  });\r\n  monitor3.on('freemem', function() {\r\n    trace3.freememPct = event;\r\n  });\r\n});\r\n\r\nmonitor2.start({\r\n  freemem: 0.7,\r\n  immediate: true\r\n}).stop();\r\n\r\nmonitor3.start({\r\n  freemem: 0.1,\r\n  immediate: true\r\n}).stop();\r\n\r\nsetImmediate(function() {\r\n  assert.ok(trace2.freememAbsolute, \"freememAbsolute expected\");\r\n  assert.ok(trace2.freememPct, \"freememPct expected\");\r\n  assert.ok(trace2.uptime, \"uptime expected\");\r\n  assert.ok(trace2.loadavg1, \"loadavg1 expected\");\r\n  assert.ok(trace2.loadavg5, \"loadavg5 expected\");\r\n  assert.ok(trace2.loadavg15, \"loadavg15 expected\");\r\n  \r\n  assert.ok(trace2.freememAbsolute.timestamp, \"event.timestamp expected\");\r\n  assert.ok(trace2.freememPct.timestamp, \"event.timestamp expected\");\r\n  assert.ok(trace2.uptime.timestamp, \"event.timestamp expected\");\r\n  assert.ok(trace2.loadavg1.timestamp, \"event.timestamp expected\");\r\n  assert.ok(trace2.loadavg5.timestamp, \"event.timestamp expected\");\r\n  assert.ok(trace2.loadavg15.timestamp, \"event.timestamp expected\");\r\n  \r\n  assert.ok(trace2.freememAbsolute.loadavg, \"event.loadavg expected\");\r\n  assert.ok(trace2.freememPct.loadavg, \"event.loadavg expected\");\r\n  assert.ok(trace2.uptime.loadavg, \"event.loadavg expected\");\r\n  assert.ok(trace2.loadavg1.loadavg, \"event.loadavg expected\");\r\n  assert.ok(trace2.loadavg5.loadavg, \"event.loadavg expected\");\r\n  assert.ok(trace2.loadavg15.loadavg, \"event.loadavg expected\");\r\n  \r\n  assert.ok(trace2.freememAbsolute.freemem, \"event.freemem expected\");\r\n  assert.ok(trace2.freememPct.freemem, \"event.freemem expected\");\r\n  assert.ok(trace2.uptime.freemem, \"event.freemem expected\");\r\n  assert.ok(trace2.loadavg1.freemem, \"event.freemem expected\");\r\n  assert.ok(trace2.loadavg5.freemem, \"event.freemem expected\");\r\n  assert.ok(trace2.loadavg15.freemem, \"event.freemem expected\");\r\n  \r\n  assert.ok(trace2.freememAbsolute.totalmem, \"event.totalmem expected\");\r\n  assert.ok(trace2.freememPct.totalmem, \"event.totalmem expected\");\r\n  assert.ok(trace2.uptime.totalmem, \"event.totalmem expected\");\r\n  assert.ok(trace2.loadavg1.totalmem, \"event.totalmem expected\");\r\n  assert.ok(trace2.loadavg5.totalmem, \"event.totalmem expected\");\r\n  assert.ok(trace2.loadavg15.totalmem, \"event.totalmem expected\");\r\n  \r\n  assert.ok(trace2.freememAbsolute.uptime, \"event.uptime expected\");\r\n  assert.ok(trace2.freememPct.uptime, \"event.uptime expected\");\r\n  assert.ok(trace2.uptime.uptime, \"event.uptime expected\");\r\n  assert.ok(trace2.loadavg1.uptime, \"event.uptime expected\");\r\n  assert.ok(trace2.loadavg5.uptime, \"event.uptime expected\");\r\n  assert.ok(trace2.loadavg15.uptime, \"event.uptime expected\");\r\n  \r\n  assert.strictEqual(trace2.freememAbsolute.type, \"freemem\", \"event.type === 'freemem' expected\");\r\n  assert.strictEqual(trace2.freememPct.type, \"freemem\", \"event.type === 'freemem' expected\");\r\n  assert.strictEqual(trace2.uptime.type, \"uptime\", \"event.type === 'uptime' expected\");\r\n  assert.strictEqual(trace2.loadavg1.type, \"loadavg1\", \"event.type === 'loadavg1' expected\");\r\n  assert.strictEqual(trace2.loadavg5.type, \"loadavg5\", \"event.type === 'loadavg5' expected\");\r\n  assert.strictEqual(trace2.loadavg15.type, \"loadavg15\", \"event.type === 'loadavg15' expected\");\r\n  \r\n  assert.ok(!trace3.freememAbsolute, \"freememAbsolute not expected\");\r\n  assert.ok(!trace3.freememPct, \"freememPct not expected\");\r\n  assert.ok(!trace3.uptime, \"uptime not expected\");\r\n  assert.ok(!trace3.loadavg1, \"loadavg1 not expected\");\r\n  assert.ok(!trace3.loadavg5, \"loadavg5 not expected\");\r\n  assert.ok(!trace3.loadavg15, \"loadavg15 not expected\");\r\n  \r\n  process.stdout.write(\"mock tests OK\" + getEOL(1));\r\n});"}